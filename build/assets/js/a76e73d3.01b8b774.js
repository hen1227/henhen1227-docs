"use strict";(self.webpackChunkhenhen_1227_docs=self.webpackChunkhenhen_1227_docs||[]).push([[163],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>h});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(i),m=a,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return i?n.createElement(h,l(l({ref:t},u),{},{components:i})):n.createElement(h,l({ref:t},u))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=i[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},7877:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=i(7462),a=(i(7294),i(3905));const r={sidebar_position:1},l="BluetoothSerial Class",o={unversionedId:"api-reference/bluetooth-serial",id:"api-reference/bluetooth-serial",title:"BluetoothSerial Class",description:"BluetoothSerial manages the Bluetooth communication, ensuring efficient reading/writing of messages, sending alerts, and handling connected devices. This class encapsulates the intricacies of Bluetooth communication, making it straightforward for the user to send and receive data.",source:"@site/docs/api-reference/bluetooth-serial.md",sourceDirName:"api-reference",slug:"/api-reference/bluetooth-serial",permalink:"/docs/api-reference/bluetooth-serial",draft:!1,editUrl:"https://github.com/henhen1227/henhen1227-docs/edit/main/docs/api-reference/bluetooth-serial.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"bsDocsSidebar",previous:{title:"API Reference",permalink:"/docs/category/api-reference"},next:{title:"BluetoothSerialJoystick Class",permalink:"/docs/api-reference/bluetooth-serial-joystick"}},s={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Constructors",id:"constructors",level:2},{value:"BluetoothSerial(HardwareSerial&amp; serial, bool verbose = true)",id:"bluetoothserialhardwareserial-serial-bool-verbose--true",level:3},{value:"Methods",id:"methods",level:2},{value:"void begin(int baudRate = 9600)",id:"void-beginint-baudrate--9600",level:3},{value:"void readSerial(char terminator = &#39;\n&#39;, int terminatingTimeout = 50)",id:"void-readserialchar-terminator--n-int-terminatingtimeout--50",level:3},{value:"void writeSerial(String message)",id:"void-writeserialstring-message",level:3},{value:"void sendAlert(String message)",id:"void-sendalertstring-message",level:3},{value:"void setDisplay(String message, int displayID)",id:"void-setdisplaystring-message-int-displayid",level:3},{value:"void clearBuffer()",id:"void-clearbuffer",level:3},{value:"String getMessage();",id:"string-getmessage",level:3},{value:"bool isButtonPressed(int id)",id:"bool-isbuttonpressedint-id",level:3},{value:"bool isJoystickUpdated(int id);",id:"bool-isjoystickupdatedint-id",level:3},{value:"BluetoothSerialJoystick getJoystick(int id)",id:"bluetoothserialjoystick-getjoystickint-id",level:3}],u={toc:d},p="wrapper";function c(e){let{components:t,...i}=e;return(0,a.kt)(p,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bluetoothserial-class"},"BluetoothSerial Class"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"BluetoothSerial")," manages the Bluetooth communication, ensuring efficient reading/writing of messages, sending alerts, and handling connected devices. This class encapsulates the intricacies of Bluetooth communication, making it straightforward for the user to send and receive data."),(0,a.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#constructors"},"Constructors")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#methods"},"Methods"))),(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("h3",{id:"bluetoothserialhardwareserial-serial-bool-verbose--true"},"BluetoothSerial(HardwareSerial& serial, bool verbose = true)"),(0,a.kt)("p",null,"Initializes the ",(0,a.kt)("inlineCode",{parentName:"p"},"BluetoothSerial")," object."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"serial"),": Reference to a HardwareSerial object (e.g., Serial1)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"verbose"),": (Optional) Indicates if debug messages should be printed to the Serial. Default is ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"void-beginint-baudrate--9600"},"void begin(int baudRate = 9600)"),(0,a.kt)("p",null,"Initializes the serial communication."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"baudRate"),": (Optional) The baud rate for serial communication. Default is ",(0,a.kt)("inlineCode",{parentName:"li"},"9600"),".")),(0,a.kt)("h3",{id:"void-readserialchar-terminator--n-int-terminatingtimeout--50"},"void readSerial(char terminator = '\\n', int terminatingTimeout = 50)"),(0,a.kt)("p",null,"Reads and processes input from the Bluetooth serial connection. Required to update the events sent from the app."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"terminator"),": (Optional) Character that indicates the end of a message. Default is '\\n'."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"terminatingTimeout"),": (Optional) Duration (in milliseconds) to wait for the terminator. Default is 50ms.")),(0,a.kt)("h3",{id:"void-writeserialstring-message"},"void writeSerial(String message)"),(0,a.kt)("p",null,"Sends a message a raw message to the app. The BluetoothSerial Connect app won't process these. Longer messages may experience delays."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message"),": The content to be sent.")),(0,a.kt)("h3",{id:"void-sendalertstring-message"},"void sendAlert(String message)"),(0,a.kt)("p",null,"Sends an alert message to the app. Longer messages may experience delays."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message"),": Alert content.")),(0,a.kt)("h3",{id:"void-setdisplaystring-message-int-displayid"},"void setDisplay(String message, int displayID)"),(0,a.kt)("p",null,"Displays a message on a display element in the app. Longer messages may experience delays."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message"),": The content to display on the app."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"displayID"),": Identifier for a specific display element in the app.")),(0,a.kt)("h3",{id:"void-clearbuffer"},"void clearBuffer()"),(0,a.kt)("p",null,'Clears the record of pressed buttons. After calling this method, all button states are set to "not pressed" until they are read again by ',(0,a.kt)("inlineCode",{parentName:"p"},"readSerial()"),". Typically called at the end of the Arduino ",(0,a.kt)("inlineCode",{parentName:"p"},"loop()")," function."),(0,a.kt)("h3",{id:"string-getmessage"},"String getMessage();"),(0,a.kt)("p",null,"Gets string messages from app. Sent through the console section of the board."),(0,a.kt)("h3",{id:"bool-isbuttonpressedint-id"},"bool isButtonPressed(int id)"),(0,a.kt)("p",null,"Checks if a specific button is currently pressed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the button as defined in the app."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," if the button is pressed, ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,a.kt)("h3",{id:"bool-isjoystickupdatedint-id"},"bool isJoystickUpdated(int id);"),(0,a.kt)("p",null,"Checks if a specific joystick has been updated since last call."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the joystick as defined in the app."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": True if the joystick is updated, false otherwise.")),(0,a.kt)("h3",{id:"bluetoothserialjoystick-getjoystickint-id"},"BluetoothSerialJoystick getJoystick(int id)"),(0,a.kt)("p",null,"Retrieves the current state of a specific joystick."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the joystick as defined in the app."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Returns"),": A ",(0,a.kt)("inlineCode",{parentName:"li"},"BluetoothSerialJoystick")," object representing the joystick's current state.")))}c.isMDXComponent=!0}}]);